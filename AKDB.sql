Use akshay;

DROP TABLE CUSTOMERS_AK;

#CREATE TABLES

CREATE TABLE CUSTOMERS_AK(
   CUST_ID INT NOT NULL,
   CUST_NAME VARCHAR (25) NOT NULL,
   AGE  INT NOT NULL,
   SEX CHAR(1),
   ADDRESS VARCHAR (25) ,
   SALARY DECIMAL (25, 2),       
   PRIMARY KEY (CUST_ID)
);

CREATE TABLE ACCOUNT_AK(
	ACC_ID INT NOT NULL,
    BALANCE DECIMAL (25, 2),
    BRANCH_ID INT NOT NULL,
    OPEN_DATE DATETIME,
    LAST_ACTIVITY DATETIME,
    CUST_ID INT NOT NULL,
    PRIMARY KEY (ACC_ID)
);
    
CREATE TABLE ACC_TRANSACTION_AK(
	TXN_ID INT NOT NULL,
    ACC_ID INT NOT NULL,
    AMOUNT FLOAT,
    PRIMARY KEY (TXN_ID)
);

    
CREATE TABLE BRANCH_AK(
	BRANCH_ID INT NOT NULL,
    ADDRESS VARCHAR(25),
    CITY VARCHAR(25), 
    STATE VARCHAR(25),
    PRIMARY KEY (BRANCH_ID)
);

#INSERTION AND DELETE

INSERT INTO CUSTOMERS_AK VALUES(0001, 'AKSHAY', 25, 'M','PARK DRIVE BOSTON', 60000);
INSERT INTO CUSTOMERS_AK VALUES(0002, 'ANDREW', 22, 'M','CITYVIEW BOSTON', 40000);
INSERT INTO CUSTOMERS_AK VALUES(0003, 'JAMIE', 28, 'M','MALDEN', 850000);
INSERT INTO CUSTOMERS_AK VALUES(0004, 'KATIE', 48, 'F','REVERE', 50000);


INSERT INTO ACCOUNT_AK VALUES(1111, 240000, 2, '2018-09-01','2018-09-06', 0002);
INSERT INTO ACCOUNT_AK VALUES(1112, 40000, 3, '2018-09-02',now(), 0001);
INSERT INTO ACCOUNT_AK VALUES(1113, 640000, 4, '2018-09-03',now(), 0003);
INSERT INTO ACCOUNT_AK VALUES(1114, 640000, 4, '2018-04-03',now(), 00016);



INSERT INTO ACC_TRANSACTION_AK VALUES(3333, 1112, 200.53);
INSERT INTO ACC_TRANSACTION_AK VALUES(3334, 1113, 21200.543);
INSERT INTO ACC_TRANSACTION_AK VALUES(3335, 1111, 20430.53);
INSERT INTO ACC_TRANSACTION_AK VALUES(3336, 1111, 2);
INSERT INTO ACC_TRANSACTION_AK VALUES(3337, 1111, 24);
INSERT INTO ACC_TRANSACTION_AK VALUES(3338, 1111, 0.53);
INSERT INTO ACC_TRANSACTION_AK VALUES(3339, 1111, 3);


INSERT INTO BRANCH_AK VALUES(0002,'FENWAY','BOSTON','MA');
INSERT INTO BRANCH_AK VALUES(11,'CENTRAL PARK','NEW YORK','NY');
INSERT INTO BRANCH_AK VALUES(12,'REVERE','BOSTON','MA');

#DELETE
INSERT INTO ACC_TRANSACTION_AK VALUES(3336, 1111, 20123430.53);
DELETE FROM ACC_TRANSACTION_AK WHERE TXN_ID = 3336;

#UPDATE
UPDATE ACC_TRANSACTION_AK SET AMOUNT = 20420 WHERE TXN_ID = 3335; 

#SELECT
SELECT * FROM ACC_TRANSACTION_AK;

SELECT CITY AS 'BRANCH CITY' FROM BRANCH_AK;

SELECT CITY AS 'BRANCH CITY' FROM BRANCH_AK LIMIT 2; 

SELECT * FROM ACCOUNT_AK WHERE BALANCE >= 80000;  

SELECT TXN_ID, ACC_ID, AMOUNT + 100 AS BONUS FROM ACC_TRANSACTION_AK;

SELECT * FROM ACC_TRANSACTION_AK ORDER BY AMOUNT DESC;

SELECT * FROM BRANCH_AK WHERE CITY LIKE 'B%';

SELECT * FROM BRANCH_AK WHERE CITY IN ('BOSTON','NEW YORK');

SELECT * FROM ACC_TRANSACTION_AK WHERE AMOUNT BETWEEN 100 AND 300;

SELECT * FROM ACC_TRANSACTION_AK WHERE AMOUNT NOT BETWEEN 100 AND 300;

#AGGREGATION

SELECT COUNT(*) FROM BRANCH_AK;
SELECT SUM(AMOUNT) FROM ACC_TRANSACTION_AK;
SELECT MIN(AMOUNT) FROM ACC_TRANSACTION_AK;
SELECT AVG(AMOUNT) FROM ACC_TRANSACTION_AK;

SELECT TXN_ID,ACC_ID, SUM(AMOUNT), AVG(AMOUNT) FROM ACC_TRANSACTION_AK GROUP BY ACC_ID ORDER BY AVG(AMOUNT);

SELECT TXN_ID,ACC_ID, SUM(AMOUNT), AVG(AMOUNT) FROM ACC_TRANSACTION_AK GROUP BY ACC_ID HAVING AVG(AMOUNT) > 300 ORDER BY AVG(AMOUNT) ;

SELECT COUNT(DISTINCT ACC_ID) AS NUM_OF_ACCOUNTS FROM ACC_TRANSACTION_AK;

SELECT ACC_ID, SUM(AMOUNT), CASE WHEN SUM(AMOUNT) > 1000 THEN 'YES' ELSE 'NO' END AS BONUS FROM ACC_TRANSACTION_AK GROUP BY ACC_ID;

#JOINS

#SIMPLE INNER JOIN
SELECT * FROM CUSTOMERS_AK, ACCOUNT_AK WHERE CUSTOMERS_AK.CUST_ID = ACCOUNT_AK.CUST_ID;
#LEFT JOIN AND RIGHT
SELECT * FROM CUSTOMERS_AK LEFT JOIN ACCOUNT_AK ON CUSTOMERS_AK.CUST_ID = ACCOUNT_AK.CUST_ID;
SELECT * FROM CUSTOMERS_AK RIGHT JOIN ACCOUNT_AK ON CUSTOMERS_AK.CUST_ID = ACCOUNT_AK.CUST_ID;

#FULL OUTER 
#NOT IN MYSQL BUT I'LL PERFORM A UNION TO DEMONSTRATE
SELECT * FROM CUSTOMERS_AK LEFT JOIN ACCOUNT_AK ON CUSTOMERS_AK.CUST_ID = ACCOUNT_AK.CUST_ID
UNION
SELECT * FROM CUSTOMERS_AK RIGHT JOIN ACCOUNT_AK ON CUSTOMERS_AK.CUST_ID = ACCOUNT_AK.CUST_ID;

#CROSS JOIN
SELECT * FROM CUSTOMERS_AK CROSS JOIN ACCOUNT_AK; 

#SELF JOIN
SELECT * FROM CUSTOMERS_AK A1, CUSTOMERS_AK A2 WHERE A1.CUST_ID <> A2.CUST_ID;

#MORE JOINS
SELECT A1.CUST_ID, A1.CUST_NAME, A1.SALARY,A2.BALANCE, A3.AMOUNT, A3.AMOUNT * 0.01 AS CASHBACK FROM CUSTOMERS_AK A1, ACCOUNT_AK A2, ACC_TRANSACTION_AK A3 WHERE A1.CUST_ID = A2.CUST_ID AND A2.ACC_ID = A3.ACC_ID;   

SELECT A1.CUST_ID, A1.CUST_NAME, A1.SALARY,A2.BALANCE, A3.AMOUNT, SUM(AMOUNT) AS TOTAL_AMOUNT FROM CUSTOMERS_AK A1, ACCOUNT_AK A2, ACC_TRANSACTION_AK A3 WHERE A1.CUST_ID = A2.CUST_ID AND A2.ACC_ID = A3.ACC_ID GROUP BY A1.CUST_ID HAVING A2.BALANCE > 40000 ORDER BY AMOUNT DESC ;   

SELECT A1.CUST_ID, A1.CUST_NAME, A1.SALARY,A2.BALANCE, A3.AMOUNT, A4.BRANCH_ID, SUM(AMOUNT) AS TOTAL_AMOUNT FROM CUSTOMERS_AK A1, ACCOUNT_AK A2, ACC_TRANSACTION_AK A3, BRANCH_AK A4 WHERE A1.CUST_ID = A2.CUST_ID AND A2.ACC_ID = A3.ACC_ID AND A2.BRANCH_ID = A4.BRANCH_ID GROUP BY A1.CUST_ID ORDER BY AMOUNT DESC ;   

#INNER QUERY

SELECT * FROM ACCOUNT_AK WHERE CUST_ID IN(SELECT CUST_ID FROM CUSTOMERS_AK WHERE SALARY > 40000);


#STRING FUNCTIONS

SELECT LEFT(ACCOUNT_AK.OPEN_DATE,4),CUSTOMERS_AK.CUST_ID AS YEAR FROM CUSTOMERS_AK RIGHT JOIN ACCOUNT_AK ON CUSTOMERS_AK.CUST_ID = ACCOUNT_AK.CUST_ID;

SELECT ACCOUNT_AK.OPEN_DATE ,CUSTOMERS_AK.CUST_ID, TRIM(BOTH '00:00:00' FROM ACCOUNT_AK.OPEN_DATE) AS YEAR FROM CUSTOMERS_AK RIGHT JOIN ACCOUNT_AK ON CUSTOMERS_AK.CUST_ID = ACCOUNT_AK.CUST_ID;

SELECT SUBSTR(ACCOUNT_AK.OPEN_DATE, 6,2) AS MONTH, CUSTOMERS_AK.CUST_ID  FROM CUSTOMERS_AK RIGHT JOIN ACCOUNT_AK ON CUSTOMERS_AK.CUST_ID = ACCOUNT_AK.CUST_ID;

SELECT CUSTOMERS_AK.CUST_ID, CONCAT(CUSTOMERS_AK.CUST_NAME,' ', CUSTOMERS_AK.ADDRESS) AS NAME_AND_ADDRESS FROM CUSTOMERS_AK RIGHT JOIN ACCOUNT_AK ON CUSTOMERS_AK.CUST_ID = ACCOUNT_AK.CUST_ID;




